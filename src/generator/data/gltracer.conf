/*
 *  Tracy configuration for OpenGL ES 1.1
 */

name:       "GLES"
library:    "libgles_cm_orig.dll"

systemincludes
{
    "gles/gl.h"
    "gles/egl.h"
}

apiheaders
{
    "gl.h"
    "egl.h"
    "egltypes.h"
}

sources
{
    "gltracer_custom.c"(preprocess=0)      /* A few custom things that the tracer can't handle yet */
}

macros
{
    GLAPI:        "extern"
    GL_APIENTRY:  ""
}

hooks
{
    "gl_hooks.c"
    tracer
    {
        "gltracer_hooks.c"
    }
    player
    {
        "glplayer_hooks.c"
    }
}

/* Symbian specific configuration */
symbian
{
    hooks
    {
        "gl_hooks_symbian.cpp"
    }

    systemincludes
    {
        "w32std.h"
        "fbs.h"
        "e32cmn.h"
    }

    tracer
    {
        target:     "libgles_cm.dll"
        uid1:       "0x1000008D"
        uid2:       "0x101FCABD"
        capability: "ALL -TCB"
        vendorid:   "0"
        
        deffiles
        {
            "opengles11u.def"
        }
        
        libraries
        {
            "ws32.lib"
            "fbscli.lib"
        }
    }
    
    player
    {
        target:     "glesplayer.exe"
        uid1:       "0x1000008D"
        uid2:       "0xa007011a"
        capability: "None"
        vendorid:   "0"
        
        libraries
        {
            "libgles_cm.lib"
            "ws32.lib"
            "fbscli.lib"
        }
    }
}

/* Mapping from special GL objects to custom objects */
types
{
    NativeWindowType:   object
    NativePixmapType:   object
    
    /* EGL objects */
    EGLDisplay:         object
    EGLSurface:         object
    EGLContext:         object
}

/* Special function attributes */
functions
{
    eglTerminate(terminator = 1)
    eglSwapBuffers(framemarker = 1)
    eglCopyBuffers(framemarker = 1)
    glReadPixels(framemarker = 1)
    eglMakeCurrent(runtimestate = 1)
    {
        ctx:              "ctx"
    }
    glAlphaFunc
    {
        func:             "ctx.alpha_func"
        ref:              "ctx.alpha_ref"
    }
    glAlphaFuncx
    {
        func:             "ctx.alpha_func"
        ref:              "ctx.alpha_ref"
    }
    glBindBuffer(runtimestate = 1)
    {
        target:           "ctx.buffer"
        buffer:           "ctx.buffer.handle"
    }
    glBindTexture
    {
        target:           "ctx.texunit.target"
        texture:          "ctx.texunit.target.handle"
    }
    glBlendFunc
    {
        sfactor:          "ctx.blend_src"
        dfactor:          "ctx.blend_dest"
    }
    glClear
    {
    }
    glClearColor
    {
        red:              "ctx.clear_r"
        green:            "ctx.clear_g"
        blue:             "ctx.clear_b"
        alpha:            "ctx.clear_a"
    }  
    glClearColorx
    {
        red:              "ctx.clear_r"
        green:            "ctx.clear_g"
        blue:             "ctx.clear_b"
        alpha:            "ctx.clear_a"
    }  
    glClearDepthf
    {
        depth:            "ctx.clear_z"
    }  
    glClearDepthx
    {
        depth:            "ctx.clear_z"
    }  
    glClearStencil
    {
        s:                "ctx.clear_s"
    }  
    glClearDepthf
    {
        depth:            "ctx.clear_z"
    }  
    glClientActiveTexture(runtimestate = 1)
    {
        texture:          "ctx.ctexunit"
    }
    glClipPlanef
    {
        plane:            "ctx.clipplane"
        equation:         "ctx.clipplane.equation"
    }
    glClipPlanex
    {
        plane:            "ctx.clipplane"
        equation:         "ctx.clipplane.equation"
    }
    glColor4f
    {
        red:              "ctx.color_r"
        green:            "ctx.color_g"
        blue:             "ctx.color_b"
        alpha:            "ctx.color_a"
    }
    glColor4x
    {
        red:              "ctx.color_r"
        green:            "ctx.color_g"
        blue:             "ctx.color_b"
        alpha:            "ctx.color_a"
    }
    glColorMask
    {
        red:              "ctx.colormask_r"
        green:            "ctx.colormask_g"
        blue:             "ctx.colormask_b"
        alpha:            "ctx.colormask_a"
    }
    glColorPointer(runtimestate = 1)
    {
        size:             "ctx.color_size"
        type:             "ctx.color_type"
        stride:           "ctx.color_stride"
        pointer:          "ctx.color_pointer"
    }
    glCompressedTexImage2D
    {
        target:           "ctx.texunit.target"
        level:            "ctx.texunit.target.handle.level"
        internalformat:   "ctx.texunit.target.handle.level.internalformat"
        width:            "ctx.texunit.target.handle.level.width"
        height:           "ctx.texunit.target.handle.level.height"
        border:           "ctx.texunit.target.handle.level.border"
        data:             "ctx.texunit.target.handle.level.pixels"
    }
    glCompressedTexSubImage2D
    {
        target:           "ctx.texunit.target"
        level:            "ctx.texunit.target.handle.level"
        data:             "ctx.texunit.target.handle.level.pixels"
    }
    glCopyTexImage2D
    {
        target:           "ctx.texunit.target"
        level:            "ctx.texunit.target.handle.level"
        internalformat:   "ctx.texunit.target.handle.level.internalformat"
        width:            "ctx.texunit.target.handle.level.width"
        height:           "ctx.texunit.target.handle.level.height"
        @set:             "ctx.texunit.target.handle.level.pixels"
    }
    glCopyTexSubImage2D
    {
        target:           "ctx.texunit.target"
        level:            "ctx.texunit.target.handle.level"
        @modify:          "ctx.texunit.target.handle.level.pixels"
    }
    glCullFace
    {
        mode:             "ctx.cull_mode"
    }
    glCurrentPaletteMatrixOES
    {
        mode:             "ctx.matrix_mode.matrix"
    }
    glCurrentPaletteMatrixOES
    {
        mode:             "ctx.matrix_mode.matrix"
    }
    glDeleteBuffers
    {
    }
    glDeleteTextures
    {
    }
    glDepthFunc
    {
        func:             "ctx.depth_func"
    }
    glDepthMask
    {
        flag:             "ctx.depth_mask"
    }
    glDepthRangef
    {
        zNear:            "ctx.depth_near"
        zFar:             "ctx.depth_far"
    }
    glDepthRangex
    {
        zNear:            "ctx.depth_near"
        zFar:             "ctx.depth_far"
    }
    glDrawTexsOES
    {
    }
    glDrawTexiOES
    {
    }
    glDrawTexfOES
    {
    }
    glDrawTexxOES
    {
    }
    glDisable
    {
        @modify:         "ctx.state"
    }
    glDisableClientState(runtimestate = 1)
    {
        @modify:         "ctx.client_state"
    }
    glDrawElements
    {
    }
    glDrawArrays
    {
    }
    glEnable
    {
        @modify:         "ctx.state"
    }
    glEnableClientState(runtimestate = 1)
    {
        @modify:         "ctx.client_state"
    }
    glFinish
    {
    }
    glFlush
    {
    }
    glFogf
    {
        pname:            "ctx.fog_parameter"
        param:            "ctx.fog_parameter.value"
    }
    glFogx
    {
        pname:            "ctx.fog_parameter"
        param:            "ctx.fog_parameter.value"
    }
    glFogfv
    {
        pname:            "ctx.fog_parameter"
        params:           "ctx.fog_parameter.value"
    }
    glFogxv
    {
        pname:            "ctx.fog_parameter"
        params:           "ctx.fog_parameter.value"
    }
    glFrontFace
    {
        mode:             "ctx.front_face"
    }
    glFrontFace
    {
        mode:             "ctx.front_face"
    }
    glFrustumf
    {
        left:             "ctx.frustum_left"
        right:            "ctx.frustum_right"
        bottom:           "ctx.frustum_bottom"
        top:              "ctx.frustum_top"
        zNear:            "ctx.frustum_near"
        zFar:             "ctx.frustum_far"
    }
    glFrustumx
    {
        left:             "ctx.frustum_left"
        right:            "ctx.frustum_right"
        bottom:           "ctx.frustum_bottom"
        top:              "ctx.frustum_top"
        zNear:            "ctx.frustum_near"
        zFar:             "ctx.frustum_far"
    }
    glGenBuffers
    {
    }
    glGenTextures
    {
    }
    glGenBuffers
    {
    }
    glGetBooleanv
    {
    }
    glGetFixedv
    {
    }
    glGetFloatv
    {
    }
    glGetIntegerv
    {
    }
    glGetBufferParameteriv
    {
    }
    glGetClipPlanef
    {
    }
    glGetClipPlanex
    {
    }
    glGetError
    {
    }
    glGetLightfv
    {
    }
    glGetLightxv
    {
    }
    glGetMaterialfv
    {
    }
    glGetMaterialxv
    {
    }
    glGetPointerv
    {
    }
    glGetString
    {
    }
    glGetTexEnvfv
    {
    }
    glGetTexEnvxv
    {
    }
    glGetTexEnviv
    {
    }
    glGetTexParameterfv
    {
    }
    glHint
    {
        target:           "ctx.hint"
        mode:             "ctx.hint.mode"
    }
    glIsBuffer
    {
    }
    glIsEnabled
    {
    }
    glIsTexture
    {
    }
    glLightf
    {
        light:            "ctx.light"
        pname:            "ctx.light.parameter"
        param:            "ctx.light.parameter.value"
    }
    glLightx
    {
        light:            "ctx.light"
        pname:            "ctx.light.parameter"
        param:            "ctx.light.parameter.value"
    }
    glLightfv
    {
        light:            "ctx.light"
        pname:            "ctx.light.parameter"
        params:           "ctx.light.parameter.value"
    }
    glLightxv
    {
        light:            "ctx.light"
        pname:            "ctx.light.parameter"
        params:           "ctx.light.parameter.value"
    }
    glLightModelf
    {
        pname:            "ctx.light_model_parameter"
        param:            "ctx.light_model_parameter.value"
    }
    glLightModelx
    {
        pname:            "ctx.light_model_parameter"
        param:            "ctx.light_model_parameter.value"
    }
    glLightModelfv
    {
        pname:            "ctx.light_model_parameter"
        params:           "ctx.light_model_parameter.value"
    }
    glLightModelxv
    {
        pname:            "ctx.light_model_parameter"
        params:           "ctx.light_model_parameter.value"
    }
    glLineWidth
    {
        width:            "ctx.line_width"
    }
    glLineWidthx
    {
        width:            "ctx.line_width"
    }
    glLoadIdentity
    {
        @modify:          "ctx.matrix_mode.matrix"
    }
    glLoadMatrixf
    {
        @modify:          "ctx.matrix_mode.matrix"
    }
    glLoadMatrixx
    {
        @modify:          "ctx.matrix_mode.matrix"
    }
    /*
    glLoadPaletteMatrixFromViewMatrixOES
    {
        @modify:          "ctx.matrix_mode.matrix"
    }
    */
    glLogicOp
    {
        opcode:           "ctx.logic_op"
    }
    glMaterialf
    {
        pname:            "ctx.material_parameter"
        param:            "ctx.material_parameter.value"
    }
    glMaterialx
    {
        pname:            "ctx.material_parameter"
        param:            "ctx.material_parameter.value"
    }
    glMaterialfv
    {
        pname:            "ctx.material_parameter"
        params:           "ctx.material_parameter.value"
    }
    glMaterialxv
    {
        pname:            "ctx.material_parameter"
        params:           "ctx.material_parameter.value"
    }
    glMatrixMode
    {
        mode:             "ctx.matrix_mode"
    }
    glMultMatrixf
    {
        @modify:          "ctx.matrix_mode.matrix"
    }
    glMultMatrixx
    {
        @modify:          "ctx.matrix_mode.matrix"
    }
    glMultiTexCoord4f
    {
        s:                "ctx.texunit.texcoord_s"
        t:                "ctx.texunit.texcoord_t"
        r:                "ctx.texunit.texcoord_r"
        q:                "ctx.texunit.texcoord_q"
    }
    glMultiTexCoord4x
    {
        s:                "ctx.texunit.texcoord_s"
        t:                "ctx.texunit.texcoord_t"
        r:                "ctx.texunit.texcoord_r"
        q:                "ctx.texunit.texcoord_q"
    }
    glNormal3f
    {
        nx:               "ctx.normal_x"
        ny:               "ctx.normal_y"
        nz:               "ctx.normal_z"
    }
    glNormal3x
    {
        nx:               "ctx.normal_x"
        ny:               "ctx.normal_y"
        nz:               "ctx.normal_z"
    }
    glOrthof
    {
        left:             "ctx.frustum_left"
        right:            "ctx.frustum_right"
        bottom:           "ctx.frustum_bottom"
        top:              "ctx.frustum_top"
        zNear:            "ctx.frustum_near"
        zFar:             "ctx.frustum_far"
    }
    glOrthox
    {
        left:             "ctx.frustum_left"
        right:            "ctx.frustum_right"
        bottom:           "ctx.frustum_bottom"
        top:              "ctx.frustum_top"
        zNear:            "ctx.frustum_near"
        zFar:             "ctx.frustum_far"
    }
    glPixelStorei
    {
        pname:            "ctx.pixelstore_parameter"
        param:            "ctx.pixelstore_parameter.value"
    }
    glPointParameterf
    {
        pname:            "ctx.point_parameter"
        param:            "ctx.point_parameter.value"
    }
    glPointParameterx
    {
        pname:            "ctx.point_parameter"
        param:            "ctx.point_parameter.value"
    }
    glPointParameterfv
    {
        pname:            "ctx.point_parameter"
        params:           "ctx.point_parameter.value"
    }
    glPointParameterxv
    {
        pname:            "ctx.point_parameter"
        params:           "ctx.point_parameter.value"
    }
    glPointSize
    {
        size:             "ctx.point_size"
    }
    glPointSizex
    {
        size:             "ctx.point_size"
    }
    glPolygonOffset
    {
        factor:           "ctx.polygon_offset_factor"
        units:            "ctx.polygon_offset_units"
    }
    glPopMatrix
    {
        @modify:          "ctx.matrix_mode.matrix"
    }
    glPushMatrix
    {
        @modify:          "ctx.matrix_mode.matrix"
    }
    glRotatef
    {
        @modify:          "ctx.matrix_mode.matrix"
    }
    glRotatex
    {
        @modify:          "ctx.matrix_mode.matrix"
    }
    glSampleCoverage
    {
        value:            "ctx.sample_coverage_value"
        invert:           "ctx.sample_coverage_invert"
    }
    glSampleCoveragex
    {
        value:            "ctx.sample_coverage_value"
        invert:           "ctx.sample_coverage_invert"
    }
    glScalef
    {
        @modify:          "ctx.matrix_mode.matrix"
    }
    glScalex
    {
        @modify:          "ctx.matrix_mode.matrix"
    }
    glScissor
    {
        x:                "ctx.scissor_x"
        y:                "ctx.scissor_y"
        width:            "ctx.scissor_width"
        height:           "ctx.scissor_height"
    }
    glShadeModel
    {
        mode:             "ctx.shademodel"
    }
    glStencilFunc
    {
        func:             "ctx.stencil_func"
        ref:              "ctx.stencil_ref"
        mask:             "ctx.stencil_mask"
    }
    glStencilMask
    {
        mask:             "ctx.stencil_writemask"
    }
    glStencilOp
    {
        fail:             "ctx.stencilop_fail"
        zfail:            "ctx.stencilop_zfail"
        zpass:            "ctx.stencilop_zpass"
    }
    glTexEnvf
    {
        target:           "ctx.texunit.target"
        pname:            "ctx.texunit.target.parameter"
        param:            "ctx.texunit.target.parameter.value"
    }
    glTexEnvx
    {
        target:           "ctx.texunit.target"
        pname:            "ctx.texunit.target.parameter"
        param:            "ctx.texunit.target.parameter.value"
    }
    glTexEnvfv
    {
        target:           "ctx.texunit.target"
        pname:            "ctx.texunit.target.parameter"
        params:           "ctx.texunit.target.parameter.value"
    }
    glTexEnvxv
    {
        target:           "ctx.texunit.target"
        pname:            "ctx.texunit.target.parameter"
        params:           "ctx.texunit.target.parameter.value"
    }
    glTexParameterf
    {
        target:           "ctx.texunit.target"
        pname:            "ctx.texunit.target.handle.parameter"
        param:            "ctx.texunit.target.handle.parameter.value"
    }
    glTexParameterx
    {
        target:           "ctx.texunit.target"
        pname:            "ctx.texunit.target.handle.parameter"
        param:            "ctx.texunit.target.handle.parameter.value"
    }
    glTranslatef
    {
        @modify:          "ctx.matrix_mode.matrix"
    }
    glTranslatex
    {
        @modify:          "ctx.matrix_mode.matrix"
    }
    glViewport
    {
        x:                "ctx.viewport_x"
        y:                "ctx.viewport_y"
        width:            "ctx.viewport_width"
        height:           "ctx.viewport_height"
    }
    glTexImage2D
    {
        target:           "ctx.texunit.target"
        level:            "ctx.texunit.target.handle.level"
        internalformat:   "ctx.texunit.target.handle.level.internalformat"
        width:            "ctx.texunit.target.handle.level.width"
        height:           "ctx.texunit.target.handle.level.height"
        border:           "ctx.texunit.target.handle.level.border"
        pixels:           "ctx.texunit.target.handle.level.pixels"
    }
    glActiveTexture
    {
        texture:          "ctx.texunit"
    }
    glTexCoordPointer(runtimestate = 1)
    {
        size:             "ctx.ctexunit.texcoord_size"
        type:             "ctx.ctexunit.texcoord_type"
        stride:           "ctx.ctexunit.texcoord_stride"
        pointer:          "ctx.ctexunit.texcoord_pointer"
    }
    glVertexPointer(runtimestate = 1)
    {
        size:             "ctx.vertex_size"
        type:             "ctx.vertex_type"
        stride:           "ctx.vertex_stride"
        pointer:          "ctx.vertex_pointer"
    }
    glNormalPointer(runtimestate = 1)
    {
        type:             "ctx.normal_type"
        stride:           "ctx.normal_stride"
        pointer:          "ctx.normal_pointer"
    }
    /*
    glPointSizePointerOES(runtimestate = 1)
    {
        type:             "ctx.pointsize_type"
        stride:           "ctx.pointsize_stride"
        pointer:          "ctx.pointsize_pointer"
    }
    glMatrixIndexPointerOES(runtimestate = 1)
    {
        size:             "ctx.matrixindex_size"
        type:             "ctx.matrixindex_type"
        stride:           "ctx.matrixindex_stride"
        pointer:          "ctx.matrixindex_pointer"
    }
    glWeightPointerOES(runtimestate = 1)
    {
        size:             "ctx.weight_size"
        type:             "ctx.weight_type"
        stride:           "ctx.weight_stride"
        pointer:          "ctx.weight_pointer"
    }
    */
    glBufferData
    {
        target:           "ctx.buffer"
        size:             "ctx.buffer.handle.size"
        data:             "ctx.buffer.handle.pointer"
        usage:            "ctx.buffer.handle.usage"
    }
}

/* State tracking support */
state
{
    /* EGL data */
    best_config

    /* GLES context */
    ctx
    {
        /* Server texture unit */
        texunit
        {
            /* 1D or 2D */
            target
            {
                /* Texture handle */
                handle
                {
                    /* Mipmap level */
                    level
                    {
                        internalformat
                        width
                        height
                        border
                        pixels
                    }
                    
                    parameter
                    {
                        value
                    }
                }
                
                /* Texture environment */
                parameter
                {
                    value
                }
            }
                
            /* Texture coordinates */
            texcoord_s
            texcoord_t
            texcoord_r
            texcoord_q
        }
        
        /* Greatest used texture unit */
        ctexunit_max
        
        /* Client texture unit */
        ctexunit
        {
            texcoord_enabled
            texcoord_size
            texcoord_type
            texcoord_stride
            texcoord_pointer
        }
        
        /* VBO */
        buffer
        {
            handle
            {
                size
                pointer
                usage
            }
        }
        
        /* Vertex array */
        vertex_enabled
        vertex_type
        vertex_size
        vertex_stride
        vertex_pointer
        
        /* Normal array */
        normal_enabled
        normal_type
        normal_stride
        normal_pointer
        
        /* Color array */
        color_enabled
        color_size
        color_type
        color_stride
        color_pointer
        
        /* Point size array */
        pointsize_enabled
        pointsize_type
        pointsize_stride
        pointsize_pointer
        
        /* Matrix index array */
        matrixindex_enabled
        matrixindex_size
        matrixindex_type
        matrixindex_stride
        matrixindex_pointer
    
        /* Matrix weight array */
        weight_enabled    
        weight_size
        weight_type
        weight_stride
        weight_pointer
        
        /* Clear color, depth and stencil */
        clear_r
        clear_g
        clear_b
        clear_a
        clear_z
        clear_s
        
        /* Rendering hints */
        hint
        {
            mode
        }
        
        /* Lighting */
        light
        {
            parameter
            {
                value
            }
        }
        light_model_parameter
        {
            value
        }
        shademodel
        
        /* Point parameter */
        point_parameter
        {
            value
        }
        point_size
        
        /* Line rendering width */
        line_width
        
        /* Fog */
        fog_parameter
        {
            value
        }
        
        /* Surface normal */
        normal_x
        normal_y
        normal_z
        
        /* Sample coverage */
        sample_coverage_value
        sample_coverage_invert
        
        /* Depth comparison function */
        depth_func
        
        /* Polygon offset */
        polygon_offset_factor
        polygon_offset_units
        
        /* Logic operation */
        logic_op
        
        /* Color mask */
        colormask_r
        colormask_g
        colormask_b
        colormask_a
        
        /* Culling */
        cull_mode
        front_face
        
        /* Viewport */
        viewport_x
        viewport_y
        viewport_width
        viewport_height
        
        /* Scissor */
        scissor_x
        scissor_y
        scissor_width
        scissor_height
        
        /* View frustum */
        frustum_left
        frustum_right
        frustum_top
        frustum_bottom
        frustum_near
        frustum_far
        
        /* Depth range and mask */
        depth_near
        depth_far
        depth_mask
        
        /* Current color */
        color_r
        color_g
        color_b
        color_a
        
        /* Current normal */
        normal_x
        normal_y
        normal_z
        
        /* Material */
        material_parameter
        {
            value
        }
        
        /* Stenciling */
        stencil_func
        stencil_ref
        stencil_mask
        stencil_writemask
        stencilop_fail
        stencilop_zpass
        stencilop_zfail
        
        /* Alpha function */
        alpha_func
        alpha_ref
        
        /* Blending equation */
        blend_src
        blend_dest
        
        /* Pixel store */
        pixelstore_parameter
        {
            value
        }
        
        /* User clip plane */
        clipplane
        {
            equation
        }
        
        /* Matrix stack */
        matrix_mode
        {
            matrix
        }
        
        /* Rendering state */
        state
        client_state
    }
}
