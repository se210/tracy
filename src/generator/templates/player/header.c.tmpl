/*********************************************************************
 *  This is a generated player for the the following libraries:
 *
#for $i, $library in enumerate($libraries):
 *      $(i + 1). $library.name - $len($library.functions) functions
#end for
 *
 *  This tracer should be compiled on the $platform.name platform.
 *********************************************************************/

#if "includes" in $config: 
  #for item in $config.includes:
\#include "$item"
  #end for
#end if
#if "systemincludes" in $config:
  #for item in $config.systemincludes:
\#include <$item>
  #end for
#end if

/* All included libraries */
#set libNames = "_".join([$library.name for library in $libraries])
\#define TR_LIBRARIES "$libNames"

## Maximum number of function arguments
#set $maxArgs = 20

##
## This function returns a list of textual items (textFn) for
## the given number of items (n).
##
## @param $n:       Number of items
## @param $textFn:  A function that will be called with the
##                  item number and which should return the
##                  text for that item
##
#def itemList($n, $textFn)
  #echo ", ".join([$textFn(i) for i in range(1, $n + 1)])
#end def

/* Function call macros. Up to $maxArgs function arguments supported. */
\#define TR_CALL0(RET, FUNC) \
         ((RET (*) ()) (FUNC)->pointer)()
#for $i in range(1, $maxArgs + 1)
\#define TR_CALL$(i)(RET, FUNC, $itemList($i, lambda i: "T%d, P%d" % (i, i))) \
         ((RET (*) ($itemList($i, lambda i: "T%d" % i))) (FUNC)->pointer)($itemList($i, lambda i: "P%d" % i))
#end for

