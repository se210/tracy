/*
 *  Tracy configuration for EGL 1.1
 */
 
name:       "egl11"

systemincludes:
[
    "GLES/egl.h"
]

apiheaders:
[
    "egl.h"
]

tracer:
{
    sources:
    [
        "egl_custom.c"(preprocess=0)
    ]
    
    hooks:
    [
        "egl_hooks.c"
        "egl_hooks_tracer.c"
    ]
}

player:
{
    hooks:
    [
        "egl_hooks.c"
        "egl_hooks_player.c"
    ]
}

/* Symbian specific configuration */
symbian:
{
    systemincludes:
    [
        "w32std.h"
        "fbs.h"
        "e32cmn.h"
    ]

    player:
    {
        hooks:
        [
            "egl_hooks_symbian.cpp"
        ]
    }

    tracer:
    {
        hooks:
        [
            "egl_hooks_symbian.cpp"
        ]
    }
}

/* Win32 specific configuration */
win32:
{
    includedirs:
    [
        "../../../libraries/rasteroid3.1/include"
    ]
    
    librarydirs:
    [
        "../../../../lib"
    ]
    
    macros:
    {
        /* Enable EGL instrumentation */
        TRACER_USE_EGL_INSTRUMENTATION: 1
        TRACER_USE_GLES_EGL:            1
    }
}

/* Unix specific configuration */
unix:
{
    systemincludes:
    [
        "X11/Xlib.h"
    ]

    tracer:
    {
        target:     "libEGL_tracer.so"
        library:    "libEGL.so"

        hooks:
        [
            "egl_hooks_unix.c"
        ]
    }

    player:
    {
        hooks:
        [
            "egl_hooks_unix.c"
        ]
    }
}

/* Mapping from special GL objects to custom objects */
types:
{
    /* Native EGL objects */
    NativeDisplayType:  object
    NativeWindowType:   object
    NativePixmapType:   object
    
    /* EGL objects */
    EGLDisplay:         object
    EGLSurface:         object
    EGLContext:         object
    EGLConfig:          object
}

/* Special function attributes */
functions:
{
    eglTerminate(terminator = 1):
    {
        @modify:          "egl_state"
    }
    eglChooseConfig:
    {
        configs:
        {
            metatype(class = "array", size = "config_size", type = "int")
        }
        num_config:
        {
            metatype(class = "array", size = 1)
        }
        @modify:          "egl_state"
    }
    eglCopyBuffers(framemarker = 1):
    {
    }
    eglCreateContext:
    {
        @return:          "egl_context.handle"
    }
    eglCreatePbufferSurface:
    {
        @return:          "egl_surface.handle"
    }
    eglCreateWindowSurface:
    {
        @return:          "egl_surface.handle"
    }
    eglCreatePixmapSurface:
    {
        @return:          "egl_surface.handle"
    }
    eglDestroyContext:
    {
        @modify:          "egl_state"
    }
    eglDestroySurface:
    {
        @modify:          "egl_state"
    }
    eglGetConfigAttrib:
    {
        value:
        {
            metatype(class = "array", size = 1)
        }
        attribute(decoration = "enum")
    }
    eglGetConfigs:
    {
        configs:
        {
            metatype(class = "array", size = "config_size", type = "int")
        }
        num_config:
        {
            metatype(class = "array", size = 1)
        }
    }
    eglGetCurrentContext:
    {
    }
    eglGetCurrentDisplay:
    {
    }
    eglGetCurrentSurface:
    {
    }
    eglGetDisplay:
    {
        display(decoration = "enum", decorationHint = "EGL_")
        @return:          "egl_display.handle"
    }
    /* TODO: Decoration of return types not yet supported */
    /*
    eglGetError:
    {
        @return(decoration = "enum")
    }
    */
    /* This is handled in a custom source file */
    eglGetProcAddress(generate = 0):
    {
    }
    eglInitialize:
    {
        major:
        {
            metatype(class = "array", size = 1)
        }
        minor:
        {
            metatype(class = "array", size = 1)
        }
        @modify:          "egl_state"
    }
    eglMakeCurrent(runtimestate = 1):
    {
        ctx:              "ctx"
    }
    eglQueryContext:
    {
        value:
        {
            metatype(class = "array", size = 1)
        }
        attribute(decoration = "enum")
    }
    eglQueryString:
    {
        name(decoration = "enum")
    }
    eglQuerySurface:
    {
        value:
        {
            metatype(class = "array", size = 1)
        }
        attribute(decoration = "enum")
    }
    eglSwapBuffers(framemarker = 1):
    {
    }
    eglWaitGL:
    {
    }
    eglWaitNative:
    {
        engine(decoration = "enum")
    }
}

/* State tracking support */
state:
{
    /* EGL pseudostate */
    egl_state
    
    /* EGL display */
    egl_display:
    {
        handle
    }
    
    /* EGL contexts */
    egl_context:
    {
        handle
    }
    
    /* EGL surfaces */
    egl_surface:
    {
        handle
    }

    /* Rendering context */
    ctx:
    {
        /* Root context for shared contexts */
        root_ctx
    }
}
