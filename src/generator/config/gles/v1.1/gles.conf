/*
 *  Tracy configuration for OpenGL ES 1.1
 */

name:       "gles11"

systemincludes:
[
    "GLES/gl.h"
    /* This is still needed for the GL extension tracer init code */
    "GLES/egl.h"
]

apiheaders:
[
    "gl.h"
]

tracer:
{
    sources:
    [
        "gl_custom.c"(preprocess=0)      /* A few custom things that the tracer can't handle yet */
    ]

    hooks:
    [
        "gl_hooks_tracer.c"
    ]
}

player:
{
    hooks:
    [
        "gl_hooks_player.c"
    ]
}

/* Symbian specific configuration */
symbian:
{

    includedirs:
    [
        "\\epoc32\\include\\osextensions"
        "\\epoc32\\include\\platform"
    ]

    
    tracer:
    {
        uid1:       "0x1000008D"
        uid2:       "0x101FCABD"
        capability: "ALL -TCB"
        vendorid:   "0"

        symbol_map:
        {
            "libglesv1_cm11_bwinsu.def": "libglesv1_cm_orig.dll" 
        }

        deffiles:
        [
            "libglesv1_cm11_bmarmu.def"
        ]
    }

    passthrough_tracer:
    {
        uid1:       "0x1000008D"
        uid2:       "0x102836BE"
        capability: "ALL -TCB"
        vendorid:   "0"

        /* Redirect internal functions up to this ordinal
         * to the original DLL
         */
        max_internal_ordinal: 300

        symbol_map:
        {
            "../../cross-api/common/common.def": "master-tracer.dll" 
            "default": "libglesv1_cm_orig.dll"
        }

        /* hack: disable including the system headers so we don't get a symbol clash */
        macros:
        {
            "__gl_h_":        1
        }

        deffiles:
        [
            "libglesv1_cm11_bmarmu.def"
        ]
    }

    player:
    {
        uid1:       "0x1000008D"
        uid2:       "0xa007011a"
        capability: "None"
        vendorid:   "0"

        libraries:
        [
            "libGLESv1_CM.lib"
        ]
    }
}

/* Unix specific configuration */
unix:
{
    macros:
    {
        /* Fix for broken Vincent headers */
        GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES:   "0x898D"
        GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES:  "0x898E"
        GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES:     "0x898F"
    }

    systemincludes:
    [
        "GLES/glext.h"
    ]

    hooks:
    [
        "gl_hooks_unix.c"
    ]

    tracer:
    {
        target:     "libGLES_CM_tracer.so"
        library:    "libGLES_CM.so"
    }

    player:
    {
        libraries:
        [
            "GLES_CM"
        ]
    }
}


/* Mapping from special GL objects to custom objects */
types:
{
    /* GL enumerations */
    GLenum:             enum
}

/* Special function attributes */
functions:
{
    glReadPixels(framemarker = 1):
    {
        pixels:
        {
            metatype(class = "image", stride = "width", height = "height"):
            [
                components(condition = "format", value = "GL_LUMINANCE_ALPHA", result = "2")
                components(condition = "format", value = "GL_RGB", result = "3")
                components(condition = "format", value = "GL_RGBA", result = "4")
                type(condition = "type", value = "GL_UNSIGNED_SHORT_5_6_5", result = "short")
                type(condition = "type", value = "GL_UNSIGNED_SHORT_5_5_5_1", result = "short")
                type(condition = "type", value = "GL_UNSIGNED_SHORT_4_4_4_4", result = "short")
            ]
        }
    }
    glAlphaFunc:
    {
        func:             "ctx.alpha_func"
        ref:              "ctx.alpha_ref"
    }
    glAlphaFuncx:
    {
        func:             "ctx.alpha_func"
        ref:              "ctx.alpha_ref"
    }
    glBindBuffer(runtimestate = 1):
    {
        target:           "ctx.buffer"
        buffer:           "ctx.buffer.handle"
    }
    glBindTexture:
    {
        target:           "ctx.texunit.target"
        texture:          "ctx.texunit.target.handle"
        /* Also set the current texture object */
        @copy(src = "ctx.texunit.target.handle", dest = "ctx.texture")
    }
    glBlendFunc:
    {
        sfactor(decorationhint = "GL_"):   "ctx.blend_src"
        dfactor(decorationhint = "GL_"):   "ctx.blend_dest"
    }
    glClear:
    {
        mask(decoration = "bitfield", decorationhint = "GL_.+BIT")
    }
    glClearColor:
    {
        red:              "ctx.clear_r"
        green:            "ctx.clear_g"
        blue:             "ctx.clear_b"
        alpha:            "ctx.clear_a"
    }  
    glClearColorx:
    {
        red:              "ctx.clear_r"
        green:            "ctx.clear_g"
        blue:             "ctx.clear_b"
        alpha:            "ctx.clear_a"
    }  
    glClearDepthf:
    {
        depth:            "ctx.clear_z"
    }  
    glClearDepthx:
    {
        depth:            "ctx.clear_z"
    }  
    glClearStencil:
    {
        s:                "ctx.clear_s"
    }  
    glClientActiveTexture(runtimestate = 1):
    {
        texture:          "ctx.ctexunit"
    }
    glClipPlanef:
    {
        plane:            "ctx.clipplane"
        equation:
        {
            state:        "ctx.clipplane.equation"
            metatype(class = "array", size = 4)
        }
    }
    glClipPlanex:
    {
        plane:            "ctx.clipplane"
        equation:
        {
            state:        "ctx.clipplane.equation"
            metatype(class = "array", size = 4)
        }
    }
    glColor4f:
    {
        red:              "ctx.color_r"
        green:            "ctx.color_g"
        blue:             "ctx.color_b"
        alpha:            "ctx.color_a"
    }
    glColor4x:
    {
        red:              "ctx.color_r"
        green:            "ctx.color_g"
        blue:             "ctx.color_b"
        alpha:            "ctx.color_a"
    }
    glColorMask:
    {
        red:              "ctx.colormask_r"
        green:            "ctx.colormask_g"
        blue:             "ctx.colormask_b"
        alpha:            "ctx.colormask_a"
    }
    glColorPointer(runtimestate = 1):
    {
        size:             "ctx.color_size"
        type:             "ctx.color_type"
        stride:           "ctx.color_stride"
        pointer:          "ctx.color_pointer"
    }
    /* TODO: Compressed texture images may define multiple mipmaps */
    glCompressedTexImage2D:
    {
        target:           "ctx.texunit.target"
        level:            "ctx.texture.level"
        internalformat:   "ctx.texture.level.internalformat"
        width:            "ctx.texture.level.width"
        height:           "ctx.texture.level.height"
        border:           "ctx.texture.level.border"
        data:
        {
            metatype(class = "array", size = "imageSize", type = "byte")
        }
        @set:             "ctx.texture.level.pixels"
    }
    /* TODO: Compressed texture images may define multiple mipmaps */
    glCompressedTexSubImage2D:
    {
        target:           "ctx.texunit.target"
        level:            "ctx.texture.level"
        data:
        {
            metatype(class = "array", size = "imageSize", type = "byte")
        }
        @modify:          "ctx.texture.level.pixels"
    }
    glCopyTexImage2D:
    {
        target:           "ctx.texunit.target"
        level:            "ctx.texture.level"
        internalformat:   "ctx.texture.level.internalformat"
        width:            "ctx.texture.level.width"
        height:           "ctx.texture.level.height"
        @set:             "ctx.texture.level.pixels"
    }
    glCopyTexSubImage2D:
    {
        target:           "ctx.texunit.target"
        level:            "ctx.texture.level"
        @modify:          "ctx.texture.level.pixels"
    }
    glCullFace:
    {
        mode:             "ctx.cull_mode"
    }
    glCurrentPaletteMatrixOES(staticlinkage = 0):
    {
        @modify:          "ctx.matrix_mode.unit.stack.matrix"
    }
    glQueryMatrixxOES(staticlinkage = 0):
    {
        mantissa:
        {
            metatype(class = "array", size = 16)
        }
        exponent:
        {
            metatype(class = "array", size = 16)
        }
        @get:             "ctx.matrix_mode.unit.stack.matrix"
    }    
    glDeleteBuffers:
    {
        buffers:
        {
            metatype(class = "array", size = "n")
        }
    }
    glDeleteTextures:
    {
        textures:
        {
            metatype(class = "array", size = "n")
        }
    }
    glDepthFunc:
    {
        func:             "ctx.depth_func"
    }
    glDepthMask:
    {
        flag:             "ctx.depth_mask"
    }
    glDepthRangef:
    {
        zNear:            "ctx.depth_near"
        zFar:             "ctx.depth_far"
    }
    glDepthRangex:
    {
        zNear:            "ctx.depth_near"
        zFar:             "ctx.depth_far"
    }
    glDrawTexsOES(staticlinkage = 0, rendercall = 1):
    {
    }
    glDrawTexiOES(staticlinkage = 0, rendercall = 1):
    {
    }
    glDrawTexfOES(staticlinkage = 0, rendercall = 1):
    {
    }
    glDrawTexxOES(staticlinkage = 0, rendercall = 1):
    {
    }
    glDrawTexsvOES(staticlinkage = 0, rendercall = 1):
    {
        coords:
        {
            metatype(class = "array", size = 5)
        }
    }
    glDrawTexivOES(staticlinkage = 0, rendercall = 1):
    {
        coords:
        {
            metatype(class = "array", size = 5)
        }
    }
    glDrawTexfvOES(staticlinkage = 0, rendercall = 1):
    {
        coords:
        {
            metatype(class = "array", size = 5)
        }
    }
    glDrawTexxvOES(staticlinkage = 0, rendercall = 1):
    {
        coords:
        {
            metatype(class = "array", size = 5)
        }
    }
    glDisable:
    {
        cap(decoration = "enum"):   "ctx.capability"
        @set:                       "ctx.capability.state"
    }
    glDisableClientState(runtimestate = 1):
    {
        array:           "ctx.client_capability"
        @set:            "ctx.client_capability.state"
    }
    glDrawElements(rendercall = 1):
    {
        mode(decorationhint = "GL_")
    }
    glDrawArrays(rendercall = 1):
    {
        mode(decorationhint = "GL_")
    }
    glEnable:
    {
        cap(decoration = "enum"):   "ctx.capability"
        @set:                       "ctx.capability.state"
    }
    glEnableClientState(runtimestate = 1):
    {
        array:           "ctx.client_capability"
        @set:            "ctx.client_capability.state"
    }
    glFinish:
    {
    }
    glFlush:
    {
    }
    glFogf:
    {
        pname:            "ctx.fog_parameter"
        param:            "ctx.fog_parameter.value"
    }
    glFogx:
    {
        pname:            "ctx.fog_parameter"
        param:            "ctx.fog_parameter.value"
    }
    glFogfv:
    {
        pname:            "ctx.fog_parameter"
        params:
        {
            state:        "ctx.fog_parameter.value"
            metatype(class = "array", size = 1):
            [
                size(condition = "pname", value = "GL_FOG_COLOR", result = "4")
            ]
        }
    }
    glFogxv:
    {
        pname:            "ctx.fog_parameter"
        params:
        {
            state:        "ctx.fog_parameter.value"
            metatype(class = "array", size = 1):
            [
                size(condition = "pname", value = "GL_FOG_COLOR", result = "4")
            ]
        }
    }
    glFrontFace:
    {
        mode:             "ctx.front_face"
    }
    glFrustumf:
    {
        @modify:          "ctx.matrix_mode.unit.stack.matrix"
        left:             "ctx.frustum_left"
        right:            "ctx.frustum_right"
        bottom:           "ctx.frustum_bottom"
        top:              "ctx.frustum_top"
        zNear:            "ctx.frustum_near"
        zFar:             "ctx.frustum_far"
    }
    glFrustumx:
    {
        @modify:          "ctx.matrix_mode.unit.stack.matrix"
        left:             "ctx.frustum_left"
        right:            "ctx.frustum_right"
        bottom:           "ctx.frustum_bottom"
        top:              "ctx.frustum_top"
        zNear:            "ctx.frustum_near"
        zFar:             "ctx.frustum_far"
    }
    glGenBuffers:
    {
        buffers:
        {
            metatype(class = "array", size = "n")
        }
    }
    glGenTextures:
    {
        textures:
        {
            metatype(class = "array", size = "n")
        }
    }
    glGetBooleanv:
    {
        params:
        {
            metatype(class = "array", size = 1):
            [
                size(condition = "pname", value = "GL_ALIASED_POINT_SIZE_RANGE", result = "2")
                size(condition = "pname", value = "GL_ALIASED_LINE_WIDTH_RANGE", result = "2")
                size(condition = "pname", value = "GL_SMOOTH_LINE_WIDTH_RANGE", result = "2")
                size(condition = "pname", value = "GL_SMOOTH_POINT_SIZE_RANGE", result = "2")
                size(condition = "pname", value = "GL_DEPTH_RANGE", result = "2")
                size(condition = "pname", value = "GL_MAX_VIEWPORT_DIMS", result = "2")
                size(condition = "pname", value = "GL_COLOR_CLEAR_VALUE", result = "2")
                size(condition = "pname", value = "GL_COLOR_WRITEMASK", result = "2")
                size(condition = "pname", value = "GL_FOG_COLOR", result = "2")
                size(condition = "pname", value = "GL_LIGHT_MODEL_AMBIENT", result = "2")
                size(condition = "pname", value = "GL_SCISSOR_BOX", result = "2")
                size(condition = "pname", value = "GL_VIEWPORT", result = "2")
                /* The next one should really be queried from GL_NUM_COMPRESSED_TEXTURE_FORMATS */
                size(condition = "pname", value = "GL_COMPRESSED_TEXTURE_FORMATS", result = "1")
                size(condition = "pname", value = "GL_MODELVIEW_MATRIX", result = "16")
                size(condition = "pname", value = "GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES", result = "16")
                size(condition = "pname", value = "GL_PROJECTION_MATRIX", result = "16")
                size(condition = "pname", value = "GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES", result = "16")
                size(condition = "pname", value = "GL_TEXTURE_MATRIX", result = "16")
                size(condition = "pname", value = "GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES", result = "16")
            ]
        }
    }
    glGetFixedv:
    {
        params:
        {
            metatype(class = "array", size = 1):
            [
                size(condition = "pname", value = "GL_ALIASED_POINT_SIZE_RANGE", result = "2")
                size(condition = "pname", value = "GL_ALIASED_LINE_WIDTH_RANGE", result = "2")
                size(condition = "pname", value = "GL_SMOOTH_LINE_WIDTH_RANGE", result = "2")
                size(condition = "pname", value = "GL_SMOOTH_POINT_SIZE_RANGE", result = "2")
                size(condition = "pname", value = "GL_DEPTH_RANGE", result = "2")
                size(condition = "pname", value = "GL_MAX_VIEWPORT_DIMS", result = "2")
                size(condition = "pname", value = "GL_COLOR_CLEAR_VALUE", result = "2")
                size(condition = "pname", value = "GL_COLOR_WRITEMASK", result = "2")
                size(condition = "pname", value = "GL_FOG_COLOR", result = "2")
                size(condition = "pname", value = "GL_LIGHT_MODEL_AMBIENT", result = "2")
                size(condition = "pname", value = "GL_SCISSOR_BOX", result = "2")
                size(condition = "pname", value = "GL_VIEWPORT", result = "2")
                /* The next one should really be queried from GL_NUM_COMPRESSED_TEXTURE_FORMATS */
                size(condition = "pname", value = "GL_COMPRESSED_TEXTURE_FORMATS", result = "1")
                size(condition = "pname", value = "GL_MODELVIEW_MATRIX", result = "16")
                size(condition = "pname", value = "GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES", result = "16")
                size(condition = "pname", value = "GL_PROJECTION_MATRIX", result = "16")
                size(condition = "pname", value = "GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES", result = "16")
                size(condition = "pname", value = "GL_TEXTURE_MATRIX", result = "16")
                size(condition = "pname", value = "GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES", result = "16")
            ]
        }
    }
    glGetFloatv:
    {
        params:
        {
            metatype(class = "array", size = 1):
            [
                size(condition = "pname", value = "GL_ALIASED_POINT_SIZE_RANGE", result = "2")
                size(condition = "pname", value = "GL_ALIASED_LINE_WIDTH_RANGE", result = "2")
                size(condition = "pname", value = "GL_SMOOTH_LINE_WIDTH_RANGE", result = "2")
                size(condition = "pname", value = "GL_SMOOTH_POINT_SIZE_RANGE", result = "2")
                size(condition = "pname", value = "GL_DEPTH_RANGE", result = "2")
                size(condition = "pname", value = "GL_MAX_VIEWPORT_DIMS", result = "2")
                size(condition = "pname", value = "GL_COLOR_CLEAR_VALUE", result = "2")
                size(condition = "pname", value = "GL_COLOR_WRITEMASK", result = "2")
                size(condition = "pname", value = "GL_FOG_COLOR", result = "2")
                size(condition = "pname", value = "GL_LIGHT_MODEL_AMBIENT", result = "2")
                size(condition = "pname", value = "GL_SCISSOR_BOX", result = "2")
                size(condition = "pname", value = "GL_VIEWPORT", result = "2")
                /* The next one should really be queried from GL_NUM_COMPRESSED_TEXTURE_FORMATS */
                size(condition = "pname", value = "GL_COMPRESSED_TEXTURE_FORMATS", result = "1")
                size(condition = "pname", value = "GL_MODELVIEW_MATRIX", result = "16")
                size(condition = "pname", value = "GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES", result = "16")
                size(condition = "pname", value = "GL_PROJECTION_MATRIX", result = "16")
                size(condition = "pname", value = "GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES", result = "16")
                size(condition = "pname", value = "GL_TEXTURE_MATRIX", result = "16")
                size(condition = "pname", value = "GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES", result = "16")
            ]
        }
    }
    glGetIntegerv:
    {
        params:
        {
            metatype(class = "array", size = 1):
            [
                size(condition = "pname", value = "GL_ALIASED_POINT_SIZE_RANGE", result = "2")
                size(condition = "pname", value = "GL_ALIASED_LINE_WIDTH_RANGE", result = "2")
                size(condition = "pname", value = "GL_SMOOTH_LINE_WIDTH_RANGE", result = "2")
                size(condition = "pname", value = "GL_SMOOTH_POINT_SIZE_RANGE", result = "2")
                size(condition = "pname", value = "GL_DEPTH_RANGE", result = "2")
                size(condition = "pname", value = "GL_MAX_VIEWPORT_DIMS", result = "2")
                size(condition = "pname", value = "GL_COLOR_CLEAR_VALUE", result = "2")
                size(condition = "pname", value = "GL_COLOR_WRITEMASK", result = "2")
                size(condition = "pname", value = "GL_FOG_COLOR", result = "2")
                size(condition = "pname", value = "GL_LIGHT_MODEL_AMBIENT", result = "2")
                size(condition = "pname", value = "GL_SCISSOR_BOX", result = "2")
                size(condition = "pname", value = "GL_VIEWPORT", result = "2")
                /* The next one should really be queried from GL_NUM_COMPRESSED_TEXTURE_FORMATS */
                size(condition = "pname", value = "GL_COMPRESSED_TEXTURE_FORMATS", result = "1")
                size(condition = "pname", value = "GL_MODELVIEW_MATRIX", result = "16")
                size(condition = "pname", value = "GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES", result = "16")
                size(condition = "pname", value = "GL_PROJECTION_MATRIX", result = "16")
                size(condition = "pname", value = "GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES", result = "16")
                size(condition = "pname", value = "GL_TEXTURE_MATRIX", result = "16")
                size(condition = "pname", value = "GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES", result = "16")
            ]
        }
    }
    glGetBufferParameteriv:
    {
        params:
        {
            metatype(class = "array", size = 1)
        }
    }
    glGetClipPlanef:
    {
        eqn:
        {
            metatype(class = "array", size = 4)
        }
    }
    glGetClipPlanex:
    {
        eqn:
        {
            metatype(class = "array", size = 4)
        }
    }
    glGetError:
    {
    }
    glGetLightfv:
    {
        params:
        {
            metatype(class = "array", size = 4):
            [
                size(condition = "pname", value = "GL_SPOT_DIRECTION", result = "3")
                size(condition = "pname", value = "GL_SPOT_EXPONENT", result = "1")
                size(condition = "pname", value = "GL_SPOT_CUTOFF", result = "1")
                size(condition = "pname", value = "GL_CONSTANT_ATTENUATION", result = "1")
                size(condition = "pname", value = "GL_LINEAR_ATTENUATION", result = "1")
                size(condition = "pname", value = "GL_QUADRATIC_ATTENUATION", result = "1")
            ]
        }
    }
    glGetLightxv:
    {
        params:
        {
            metatype(class = "array", size = 4):
            [
                size(condition = "pname", value = "GL_SPOT_DIRECTION", result = "3")
                size(condition = "pname", value = "GL_SPOT_EXPONENT", result = "1")
                size(condition = "pname", value = "GL_SPOT_CUTOFF", result = "1")
                size(condition = "pname", value = "GL_CONSTANT_ATTENUATION", result = "1")
                size(condition = "pname", value = "GL_LINEAR_ATTENUATION", result = "1")
                size(condition = "pname", value = "GL_QUADRATIC_ATTENUATION", result = "1")
            ]
        }
    }
    glGetMaterialfv:
    {
        params:
        {
            metatype(class = "array", size = 4):
            [
                size(condition = "pname", value = "GL_SHININESS", result = "1")
            ]
        }
    }
    glGetMaterialxv:
    {
        params:
        {
            metatype(class = "array", size = 4):
            [
                size(condition = "pname", value = "GL_SHININESS", result = "1")
            ]
        }
    }
    glGetPointerv:
    {
        params:
        {
            metatype(class = "array", size = 1, type = "byte")
        }
    }
    glGetString:
    {
    }
    glGetTexEnvfv:
    {
        params:
        {
            metatype(class = "array", size = 1):
            [
                size(condition = "pname", value = "GL_TEXTURE_ENV_COLOR", result = "4")
            ]
        }
    }
    glGetTexEnvxv:
    {
        params:
        {
            metatype(class = "array", size = 1):
            [
                size(condition = "pname", value = "GL_TEXTURE_ENV_COLOR", result = "4")
            ]
        }
    }
    glGetTexEnviv:
    {
        params:
        {
            metatype(class = "array", size = 1):
            [
                size(condition = "pname", value = "GL_TEXTURE_ENV_COLOR", result = "4")
            ]
        }
    }
    glGetTexParameterfv:
    {
        params:
        {
            metatype(class = "array", size = 1)
        }
    }
    glGetTexParameterxv:
    {
        params:
        {
            metatype(class = "array", size = 1)
        }
    }
    glGetTexParameteriv:
    {
        params:
        {
            metatype(class = "array", size = 1)
        }
    }
    glHint:
    {
        target:           "ctx.hint"
        mode:             "ctx.hint.mode"
    }
    glIsBuffer:
    {
    }
    glIsEnabled:
    {
    }
    glIsTexture:
    {
    }
    glLightf:
    {
        light:            "ctx.light"
        pname:            "ctx.light.parameter"
        param:            "ctx.light.parameter.value"
    }
    glLightx:
    {
        light:            "ctx.light"
        pname:            "ctx.light.parameter"
        param:            "ctx.light.parameter.value"
    }
    glLightfv:
    {
        light:            "ctx.light"
        pname:            "ctx.light.parameter"
        params:
        {
            state:        "ctx.light.parameter.value"
            metatype(class = "array", size = 4):
            [
                size(condition = "pname", value = "GL_SPOT_DIRECTION", result = "3")
                size(condition = "pname", value = "GL_SPOT_EXPONENT", result = "1")
                size(condition = "pname", value = "GL_SPOT_CUTOFF", result = "1")
                size(condition = "pname", value = "GL_CONSTANT_ATTENUATION", result = "1")
                size(condition = "pname", value = "GL_LINEAR_ATTENUATION", result = "1")
                size(condition = "pname", value = "GL_QUADRATIC_ATTENUATION", result = "1")
            ]
        }
    }
    glLightxv:
    {
        light:            "ctx.light"
        pname:            "ctx.light.parameter"
        params:
        {
            state:        "ctx.light.parameter.value"
            metatype(class = "array", size = 4):
            [
                size(condition = "pname", value = "GL_SPOT_DIRECTION", result = "3")
                size(condition = "pname", value = "GL_SPOT_EXPONENT", result = "1")
                size(condition = "pname", value = "GL_SPOT_CUTOFF", result = "1")
                size(condition = "pname", value = "GL_CONSTANT_ATTENUATION", result = "1")
                size(condition = "pname", value = "GL_LINEAR_ATTENUATION", result = "1")
                size(condition = "pname", value = "GL_QUADRATIC_ATTENUATION", result = "1")
            ]
        }
    }
    glLightModelf:
    {
        pname:            "ctx.light_model_parameter"
        param:            "ctx.light_model_parameter.value"
    }
    glLightModelx:
    {
        pname:            "ctx.light_model_parameter"
        param:            "ctx.light_model_parameter.value"
    }
    glLightModelfv:
    {
        pname:            "ctx.light_model_parameter"
        params:
        {
            state:        "ctx.light_model_parameter.value"
            metatype(class = "array", size = 1):
            [
                size(condition = "pname", value = "GL_LIGHT_MODEL_AMBIENT", result = "4")
            ]
        }
    }
    glLightModelxv:
    {
        pname:            "ctx.light_model_parameter"
        params:
        {
            state:        "ctx.light_model_parameter.value"
            metatype(class = "array", size = 1):
            [
                size(condition = "pname", value = "GL_LIGHT_MODEL_AMBIENT", result = "4")
            ]
        }
    }
    glLineWidth:
    {
        width:            "ctx.line_width"
    }
    glLineWidthx:
    {
        width:            "ctx.line_width"
    }
    glLoadIdentity:
    {
        @set:             "ctx.matrix_mode.unit.stack.matrix"
    }
    glLoadMatrixf:
    {
        m:
        {
            metatype(class = "array", size = 16)
        }
        @set:             "ctx.matrix_mode.unit.stack.matrix"
    }
    glLoadMatrixx:
    {
        m:
        {
            metatype(class = "array", size = 16)
        }
        @set:             "ctx.matrix_mode.unit.stack.matrix"
    }
    glLoadPaletteFromModelViewMatrixOES(staticlinkage = 0):
    {
        @set:             "ctx.matrix_mode.unit.stack.matrix"
    }
    glLogicOp:
    {
        opcode:           "ctx.logic_op"
    }
    glMaterialf:
    {
        pname:            "ctx.material_parameter"
        param:            "ctx.material_parameter.value"
    }
    glMaterialx:
    {
        pname:            "ctx.material_parameter"
        param:            "ctx.material_parameter.value"
    }
    glMaterialfv:
    {
        pname:            "ctx.material_parameter"
        params:
        {
            state:        "ctx.material_parameter.value"
            metatype(class = "array", size = 4):
            [
                size(condition = "pname", value = "GL_SHININESS", result = "1")
            ]
        }
    }
    glMaterialxv:
    {
        pname:            "ctx.material_parameter"
        params:
        {
            state:        "ctx.material_parameter.value"
            metatype(class = "array", size = 4):
            [
                size(condition = "pname", value = "GL_SHININESS", result = "1")
            ]
        }
    }
    glMatrixMode:
    {
        mode:             "ctx.matrix_mode"
    }
    glMultMatrixf:
    {
        m:
        {
            metatype(class = "array", size = 16)
        }
        @modify:          "ctx.matrix_mode.unit.stack.matrix"
    }
    glMultMatrixx:
    {
        m:
        {
            metatype(class = "array", size = 16)
        }
        @modify:          "ctx.matrix_mode.unit.stack.matrix"
    }
    glMultiTexCoord4f:
    {
        s:                "ctx.texunit.texcoord_s"
        t:                "ctx.texunit.texcoord_t"
        r:                "ctx.texunit.texcoord_r"
        q:                "ctx.texunit.texcoord_q"
    }
    glMultiTexCoord4x:
    {
        s:                "ctx.texunit.texcoord_s"
        t:                "ctx.texunit.texcoord_t"
        r:                "ctx.texunit.texcoord_r"
        q:                "ctx.texunit.texcoord_q"
    }
    glNormal3f:
    {
        nx:               "ctx.normal_x"
        ny:               "ctx.normal_y"
        nz:               "ctx.normal_z"
    }
    glNormal3x:
    {
        nx:               "ctx.normal_x"
        ny:               "ctx.normal_y"
        nz:               "ctx.normal_z"
    }
    glOrthof:
    {
        @modify:          "ctx.matrix_mode.unit.stack.matrix"
        left:             "ctx.frustum_left"
        right:            "ctx.frustum_right"
        bottom:           "ctx.frustum_bottom"
        top:              "ctx.frustum_top"
        zNear:            "ctx.frustum_near"
        zFar:             "ctx.frustum_far"
    }
    glOrthox:
    {
        @modify:          "ctx.matrix_mode.unit.stack.matrix"
        left:             "ctx.frustum_left"
        right:            "ctx.frustum_right"
        bottom:           "ctx.frustum_bottom"
        top:              "ctx.frustum_top"
        zNear:            "ctx.frustum_near"
        zFar:             "ctx.frustum_far"
    }
    glPixelStorei:
    {
        pname:            "ctx.pixelstore_parameter"
        param:            "ctx.pixelstore_parameter.value"
    }
    glPointParameterf:
    {
        pname:            "ctx.point_parameter"
        param:            "ctx.point_parameter.value"
    }
    glPointParameterx:
    {
        pname:            "ctx.point_parameter"
        param:            "ctx.point_parameter.value"
    }
    glPointParameterfv:
    {
        pname:            "ctx.point_parameter"
        params:
        {
            state:        "ctx.point_parameter.value"
            metatype(class = "array", size = 1):
            [
                size(condition = "pname", value = "GL_POINT_DISTANCE_ATTENUATION", result = "4")
            ]
        }
    }
    glPointParameterxv:
    {
        pname:            "ctx.point_parameter"
        params:
        {
            state:        "ctx.point_parameter.value"
            metatype(class = "array", size = 1):
            [
                size(condition = "pname", value = "GL_POINT_DISTANCE_ATTENUATION", result = "4")
            ]
        }
    }
    glPointSize:
    {
        size:             "ctx.point_size"
    }
    glPointSizex:
    {
        size:             "ctx.point_size"
    }
    glPolygonOffset:
    {
        factor:           "ctx.polygon_offset_factor"
        units:            "ctx.polygon_offset_units"
    }
    glPopMatrix:
    {
        @modify:          "ctx.matrix_mode.unit.stack"
    }
    glPushMatrix:
    {
        @modify:          "ctx.matrix_mode.unit.stack"
    }
    glRotatef:
    {
        @modify:          "ctx.matrix_mode.unit.stack.matrix"
    }
    glRotatex:
    {
        @modify:          "ctx.matrix_mode.unit.stack.matrix"
    }
    glSampleCoverage:
    {
        value:            "ctx.sample_coverage_value"
        invert:           "ctx.sample_coverage_invert"
    }
    glSampleCoveragex:
    {
        value:            "ctx.sample_coverage_value"
        invert:           "ctx.sample_coverage_invert"
    }
    glScalef:
    {
        @modify:          "ctx.matrix_mode.unit.stack.matrix"
    }
    glScalex:
    {
        @modify:          "ctx.matrix_mode.unit.stack.matrix"
    }
    glScissor:
    {
        x:                "ctx.scissor_x"
        y:                "ctx.scissor_y"
        width:            "ctx.scissor_width"
        height:           "ctx.scissor_height"
    }
    glShadeModel:
    {
        mode:             "ctx.shademodel"
    }
    glStencilFunc:
    {
        func:             "ctx.stencil_func"
        ref:              "ctx.stencil_ref"
        mask:             "ctx.stencil_mask"
    }
    glStencilMask:
    {
        mask:             "ctx.stencil_writemask"
    }
    glStencilOp:
    {
        fail:             "ctx.stencilop_fail"
        zfail:            "ctx.stencilop_zfail"
        zpass:            "ctx.stencilop_zpass"
    }
    glTexEnvf:
    {
        target:           "ctx.texunit.target"
        pname:            "ctx.texunit.target.parameter"
        param(decoration="enum", decorationhint="GL_"): "ctx.texunit.target.parameter.value"
    }
    glTexEnvx:
    {
        target:           "ctx.texunit.target"
        pname:            "ctx.texunit.target.parameter"
        param(decoration="enum", decorationhint="GL_"): "ctx.texunit.target.parameter.value"
    }
    glTexEnvfv:
    {
        target:           "ctx.texunit.target"
        pname:            "ctx.texunit.target.parameter"
        params:
        {
            state:        "ctx.texunit.target.parameter.value"
            metatype(class = "array", size = 1):
            [
                size(condition = "pname", value = "GL_TEXTURE_ENV_COLOR", result = "4")
            ]
        }
    }
    glTexEnvxv:
    {
        target:           "ctx.texunit.target"
        pname:            "ctx.texunit.target.parameter"
        params:
        {
            state:        "ctx.texunit.target.parameter.value"
            metatype(class = "array", size = 1):
            [
                size(condition = "pname", value = "GL_TEXTURE_ENV_COLOR", result = "4")
            ]
        }
    }
    glTexEnviv:
    {
        target:           "ctx.texunit.target"
        pname:            "ctx.texunit.target.parameter"
        params:
        {
            state:        "ctx.texunit.target.parameter.value"
            metatype(class = "array", size = 1):
            [
                size(condition = "pname", value = "GL_TEXTURE_ENV_COLOR", result = "4")
            ]
        }
    }
    glTexParameterf:
    {
        target:           "ctx.texunit.target"
        pname:            "ctx.texture.parameter"
        param:            "ctx.texture.parameter.value"
    }
    glTexParameterx:
    {
        target:           "ctx.texunit.target"
        pname:            "ctx.texture.parameter"
        param(decoration="enum", decorationhint="GL_"): "ctx.texture.parameter.value"
    }
    glTexParameteri:
    {
        target:           "ctx.texunit.target"
        pname:            "ctx.texture.parameter"
        param(decoration="enum", decorationhint="GL_"): "ctx.texture.parameter.value"
    }
    glTexParameterfv:
    {
        target:           "ctx.texunit.target"
        pname:            "ctx.texture.parameter"
        params:
        {
            state: "ctx.texture.parameter.value"
            metatype(class = "array", size = 1)
        }
    }
    glTexParameterxv:
    {
        target:           "ctx.texunit.target"
        pname:            "ctx.texture.parameter"
        params:
        {
            state: "ctx.texture.parameter.value"
            metatype(class = "array", size = 1)
        }
    }
    glTexParameteriv:
    {
        target:           "ctx.texunit.target"
        pname:            "ctx.texture.parameter"
        params:
        {
            state: "ctx.texture.parameter.value"
            metatype(class = "array", size = 1)
        }
    }
    glTranslatef:
    {
        @modify:          "ctx.matrix_mode.unit.stack.matrix"
    }
    glTranslatex:
    {
        @modify:          "ctx.matrix_mode.unit.stack.matrix"
    }
    glViewport:
    {
        x:                "ctx.viewport_x"
        y:                "ctx.viewport_y"
        width:            "ctx.viewport_width"
        height:           "ctx.viewport_height"
    }
    glTexImage2D:
    {
        level:            "ctx.texture.level"
        internalformat:   "ctx.texture.level.internalformat"
        width:            "ctx.texture.level.width"
        height:           "ctx.texture.level.height"
        border:           "ctx.texture.level.border"
        pixels:
        {
            state:        "ctx.texture.level.pixels"
            metatype(class = "image", stride = "width", height = "height"):
            [
                components(condition = "type", value = "GL_UNSIGNED_SHORT_5_6_5", result = "1")
                components(condition = "type", value = "GL_UNSIGNED_SHORT_5_5_5_1", result = "1")
                components(condition = "type", value = "GL_UNSIGNED_SHORT_4_4_4_4", result = "1")
                components(condition = "format", value = "GL_LUMINANCE_ALPHA", result = "2")
                components(condition = "format", value = "GL_RGB", result = "3")
                components(condition = "format", value = "GL_RGBA", result = "4")
                type(condition = "type", value = "GL_UNSIGNED_SHORT_5_6_5", result = "short")
                type(condition = "type", value = "GL_UNSIGNED_SHORT_5_5_5_1", result = "short")
                type(condition = "type", value = "GL_UNSIGNED_SHORT_4_4_4_4", result = "short")
            ]
        }
    }
    glTexSubImage2D:
    {
        level:            "ctx.texture.level"
        pixels:
        {
            state:        "ctx.texture.level.pixels"
            metatype(class = "image", stride = "width", height = "height"):
            [
                components(condition = "type", value = "GL_UNSIGNED_SHORT_5_6_5", result = "1")
                components(condition = "type", value = "GL_UNSIGNED_SHORT_5_5_5_1", result = "1")
                components(condition = "type", value = "GL_UNSIGNED_SHORT_4_4_4_4", result = "1")
                components(condition = "format", value = "GL_LUMINANCE_ALPHA", result = "2")
                components(condition = "format", value = "GL_RGB", result = "3")
                components(condition = "format", value = "GL_RGBA", result = "4")
                type(condition = "type", value = "GL_UNSIGNED_SHORT_5_6_5", result = "short")
                type(condition = "type", value = "GL_UNSIGNED_SHORT_5_5_5_1", result = "short")
                type(condition = "type", value = "GL_UNSIGNED_SHORT_4_4_4_4", result = "short")
            ]
        }
        @modify:          "ctx.texture.level.pixels"
    }
    glActiveTexture:
    {
        texture:          "ctx.texunit"
        @set:             "ctx.matrix_mode.unit"
        @copy(src = "ctx.texunit.target.handle", dest = "ctx.texture")
    }
    glTexCoordPointer(runtimestate = 1):
    {
        size:             "ctx.ctexunit.texcoord_size"
        type:             "ctx.ctexunit.texcoord_type"
        stride:           "ctx.ctexunit.texcoord_stride"
        pointer:          "ctx.ctexunit.texcoord_pointer"
        @set:             "ctx.ctexunit.texcoord_binding"
        @get:             "ctx.buffer.handle"
    }
    glVertexPointer(runtimestate = 1):
    {
        size:             "ctx.vertex_size"
        type:             "ctx.vertex_type"
        stride:           "ctx.vertex_stride"
        pointer:          "ctx.vertex_pointer"
        @set:             "ctx.vertex_binding"
        @get:             "ctx.buffer.handle"
    }
    glNormalPointer(runtimestate = 1):
    {
        type:             "ctx.normal_type"
        stride:           "ctx.normal_stride"
        pointer:          "ctx.normal_pointer"
        @set:             "ctx.normal_binding"
        @get:             "ctx.buffer.handle"
    }
    glPointSizePointerOES(runtimestate = 1, staticlinkage = 0):
    {
        type:             "ctx.pointsize_type"
        stride:           "ctx.pointsize_stride"
        pointer:          "ctx.pointsize_pointer"
        @set:             "ctx.pointsize_binding"
        @get:             "ctx.buffer.handle"
    }
    glMatrixIndexPointerOES(runtimestate = 1, staticlinkage = 0):
    {
        size:             "ctx.matrixindex_size"
        type:             "ctx.matrixindex_type"
        stride:           "ctx.matrixindex_stride"
        pointer:          "ctx.matrixindex_pointer"
        @set:             "ctx.matrixindex_binding"
        @get:             "ctx.buffer.handle"
    }
    glWeightPointerOES(runtimestate = 1, staticlinkage = 0):
    {
        size:             "ctx.weight_size"
        type:             "ctx.weight_type"
        stride:           "ctx.weight_stride"
        pointer:          "ctx.weight_pointer"
        @set:             "ctx.weight_binding"
        @get:             "ctx.buffer.handle"
    }
    glBufferData(runtimestate = 1):
    {
        target:           "ctx.buffer"
        size:             "ctx.buffer.handle.size"
        data:
        {
            metatype(class = "array", size = "size", type = "byte")
        }
        usage:            "ctx.buffer.handle.usage"
    }
    glBufferSubData(runtimestate = 1):
    {
        target:           "ctx.buffer"
        size:             "ctx.buffer.handle.size"
        data:
        {
            metatype(class = "array", size = "size", type = "byte")
        }
        @modify:          "ctx.buffer.handle.data"
    }
}

/* State tracking support */
state:
{
    /* GLES context */
    ctx:
    {
        /* Server texture unit */
        texunit:
        {
            /* 1D, 2D or TEXTURE_ENV */
            target:
            {
                /* Bound texture handle */
                handle
                
                /* Texture environment */
                parameter:
                {
                    value
                }
            }
                
            /* Texture coordinates */
            texcoord_s
            texcoord_t
            texcoord_r
            texcoord_q
        }
        
        /* Greatest used texture unit */
        ctexunit_max
        
        /* Client texture unit */
        ctexunit:
        {
            texcoord_enabled
            texcoord_size
            texcoord_type
            texcoord_stride
            texcoord_pointer
            texcoord_binding
        }

        /* Textures */
        texture:
        {
            /* Mipmap level */
            level:
            {
                internalformat
                width
                height
                border
                pixels
            }
            
            parameter:
            {
                value
            }
        }   
        
        
        /* Buffer object */
        buffer:
        {
            handle:
            {
                size
                data
                usage
            }
        }
        
        /* Vertex array */
        vertex_enabled
        vertex_type
        vertex_size
        vertex_stride
        vertex_pointer
        vertex_binding
        
        /* Normal array */
        normal_enabled
        normal_type
        normal_stride
        normal_pointer
        normal_binding
        
        /* Color array */
        color_enabled
        color_size
        color_type
        color_stride
        color_pointer
        color_binding
        
        /* Point size array */
        pointsize_enabled
        pointsize_type
        pointsize_stride
        pointsize_pointer
        pointsize_binding
        
        /* Matrix index array */
        matrixindex_enabled
        matrixindex_size
        matrixindex_type
        matrixindex_stride
        matrixindex_pointer
        matrixindex_binding
    
        /* Matrix weight array */
        weight_enabled    
        weight_size
        weight_type
        weight_stride
        weight_pointer
        weight_binding
        
        /* Clear color, depth and stencil */
        clear_r
        clear_g
        clear_b
        clear_a
        clear_z
        clear_s
        
        /* Rendering hints */
        hint:
        {
            mode
        }
        
        /* Lighting */
        light:
        {
            parameter:
            {
                value
            }
        }
        light_model_parameter:
        {
            value
        }
        shademodel
        
        /* Point parameter */
        point_parameter:
        {
            value
        }
        point_size
        
        /* Line rendering width */
        line_width
        
        /* Fog */
        fog_parameter:
        {
            value
        }
        
        /* Sample coverage */
        sample_coverage_value
        sample_coverage_invert
        
        /* Depth comparison function */
        depth_func
        
        /* Polygon offset */
        polygon_offset_factor
        polygon_offset_units
        
        /* Logic operation */
        logic_op
        
        /* Color mask */
        colormask_r
        colormask_g
        colormask_b
        colormask_a
        
        /* Culling */
        cull_mode
        front_face
        
        /* Viewport */
        viewport_x
        viewport_y
        viewport_width
        viewport_height
        
        /* Scissor */
        scissor_x
        scissor_y
        scissor_width
        scissor_height
        
        /* View frustum */
        frustum_left
        frustum_right
        frustum_top
        frustum_bottom
        frustum_near
        frustum_far
        
        /* Depth range and mask */
        depth_near
        depth_far
        depth_mask
        
        /* Current color */
        color_r
        color_g
        color_b
        color_a
        
        /* Current normal */
        normal_x
        normal_y
        normal_z
        
        /* Material */
        material_parameter:
        {
            value
        }
        
        /* Stenciling */
        stencil_func
        stencil_ref
        stencil_mask
        stencil_writemask
        stencilop_fail
        stencilop_zpass
        stencilop_zfail
        
        /* Alpha function */
        alpha_func
        alpha_ref
        
        /* Blending equation */
        blend_src
        blend_dest
        
        /* Pixel store */
        pixelstore_parameter:
        {
            value
        }
        
        /* User clip plane */
        clipplane:
        {
            equation
        }
        
        /* Matrix stack */
        matrix_mode:
        {
            unit:
            {
                stack:
                {
                    matrix
                }
            }
        }
        
        /* Rendering state */
        capability:
        {
            state
        }
        
        client_capability:
        {
            state
        }
    }
}
