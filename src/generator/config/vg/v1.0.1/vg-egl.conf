/*
 *  Tracy configuration for OpenVG 1.0 using the OpenVG reference engine
 */

name: "vg10-egl13"

sys.include:
[
    "../../egl/v1.3/egl.conf"
    "vg.conf"
]

/* 
 * Also include VGI functions, since we can emulate them over EGL while playing.
 * Tracing VGI functions is not supported with this configuration.
 */
apiheaders:
[
    "vgcontext.h"
    "vgcontext_symbian.h"
]

types:
{
    /* Symbian binding API types */
    TInt:                 int
    TSize:                object
    "CFbsBitmap*":        object
}

tracer:
{
    hooks:
    [
        "vg_hooks_tracer_egl.c"
    ]
}

player:
{
    hooks:
    [
        "vg_hooks_player_egl.c"
        "vg_hooks_player_vgi.cpp"
    ]
}

/* Win32 specific configuration */
win32:
{
    systemincludes:
    [
        "egl/egl.h"
    ]

    includedirs:
    [
        "../../../../libraries/openvg_ri_1_0_1/include"
    ]
    
    librarydirs:
    [
        "../../../../../lib"
    ]

    macros:
    {
        /* Enable EGL instrumentation */
        TRACER_USE_EGL_INSTRUMENTATION: 1
        TRACER_USE_SHARED_EGL:          1
    }

    player:
    {
        libraries:
        [
            "libOpenVG-ri.lib"
        ]

        hooks:
        [
            "vg_hooks_player_win32.cpp"
        ]

        sources:
        [
            "vgplayer_win32.cpp"
            "vgplayer_vgi_over_egl.c"
        ]

        includes:
        [
            "vgplayer_vgi.h"
            "vgplayer_win32.h"
        ]

        headers:
        [
            "vgplayer_vgi.h"
            "vgplayer_win32.h"
        ]
    }
}

/* Unix specific configuration */
unix:
{
    systemincludes:
    [
        "EGL/egl.h"
    ]

    tracer:
    {
        target:  "libOpenVG_tracer.so"
        library: "libOpenVG.so"

        /* For Zack's Qt-based OpenVG implementation */
        cflags:    "`pkg-config QtCore QtOpenGL --cflags`"
        ldflags:   "`pkg-config QtCore QtOpenGL --libs`"
    }

    player:
    {
        libraries:
        [
            "OpenVG"
        ]
    }
}

functions:
{
    VGIInitialize:
    {
        width:    "ctx.render_width"
        height:   "ctx.render_height"
        @set:     "ctx"
    }

    VGIResize:
    {
        width:    "ctx.render_width"
        height:   "ctx.render_height"
    }
    
    VGITerminate(terminator = 1):
    {
        @set:     "ctx"
    }
    
    VGISymbianCopyToBitmap(framemarker = 1):
    {
    }

    VGISymbianInitialize:
    {
        @set:     "ctx"
    }

    VGISymbianTerminate(terminator = 1):
    {
        @set:     "ctx"
    }
    
    VGICopyToTarget(framemarker = 1):
    {
    }
}
