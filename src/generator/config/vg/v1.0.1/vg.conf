/*
 *  Tracy configuration for OpenVG 1.0.1
 */

name:       "vg101"
language:   "c++"

systemincludes:
[
    "VG/openvg.h"
    "VG/vgu.h"
]

apiheaders:
[
    "openvg.h"
    /*"vgu.h"*/
]

tracer:
{
    hooks:
    [
        "vg_hooks_tracer.c"
    ]
}

player:
{
    hooks:
    [
        "vg_hooks_player.c"
    ]
}

/* Symbian specific configuration */
symbian:
{
    includedirs:
    [
        "\\epoc32\\include\\osextensions"
    ]
    tracer:
    {
        uid1:       "0x1000008D"
        uid2:       "0x101FCABD"
        capability: "ALL -TCB"
        vendorid:   "0"

        symbol_map:
        {
            "libopenvg_marmu.def": "libopenvg_orig.dll" 
        }

        deffiles:
        [
            "libopenvg_marmu.def"
        ]
    }

    passthrough_tracer:
    {
        uid1:       "0x1000008D"
        uid2:       "0x101FCABD"
        capability: "ALL -TCB"
        vendorid:   "0"

        /* hack: disable including the system headers so we don't get a symbol clash */
        macros:
        {
            "_OPENVG_H":        1
            "_VGU_H":           1
        }

        max_internal_ordinal: 300

        symbol_map:
        {
            "../../cross-api/gles-vg-egl/gles11-vg101-egl13u.def": "gles11-vg101-egl13-tracer.dll" 
            "default": "libopenvg_orig.dll"
        }

        deffiles:
        [
            "libopenvg_marmu.def"
        ]
    }

    player:
    {
        uid1:       "0x1000008D"
        uid2:       "0xa007011a"
        capability: "None"
        vendorid:   "0"
    }
}

/* Unix specific configuration */
unix:
{
    tracer:
    {
        target:     "libOpenVG_tracer.so"
        library:    "libOpenVG.so"
    }

    player:
    {
        libraries:
        [
            "OpenVG"
        ]
    }
}

/* Mapping from OpenVG types to native types */
types:
{
    /* VG objects */
    VGPath(namespace = "ctx.root_ctx"):               object
    VGPaint(namespace = "ctx.root_ctx"):              object
    VGImage(namespace = "ctx.root_ctx"):              object
}

/* Special function attributes */
functions:
{
    vgiVGIBridge(passthrough = 1):
    {
    }
 
    vgCreatePath(runtimestate = 1):
    {
        @return:    "ctx.object"
        datatype:   "ctx.object.datatype"
        capabilities(decoration = "bitfield", decorationhint = "VGPathCapabilities"): "ctx.object.capabilities"
        @set:       "ctx.object.segments"
    }
    
    vgAppendPathData(runtimestate = 1):
    {
        dstPath:    "ctx.object"
        pathSegments:
        {
            metatype(class = "array", size = "numSegments")
        }
        @modify:    "ctx.object.segments"
    }

    vgModifyPathCoords(runtimestate = 1):
    {
        dstPath:    "ctx.object"
        @modify:    "ctx.object.segments"
    }
    
    vgSeti:
    {
        type:       "ctx.parameter"
        value(decoration = "enum", decorationhint = "VG_.+"): "ctx.parameter.value"
    }

    vgSetf:
    {
        type:       "ctx.parameter"
        value:      "ctx.parameter.value"
    }

    vgSetiv:
    {
        type:       "ctx.parameter"
        values:
        {
            state:     "ctx.parameter.value"
            metatype(class = "array", size = "count")
        }
    }

    vgSetfv:
    {
        type:       "ctx.parameter"
        values:
        {
            state:     "ctx.parameter.value"
            metatype(class = "array", size = "count")
        }
    }

    vgGetiv:
    {
        values:
        {
            metatype(class = "array", size = "count")
        }
    }

    vgGetfv:
    {
        values:
        {
            metatype(class = "array", size = "count")
        }
    }

    vgGetMatrix:
    {
        m:
        {
            metatype(class = "array", size = "9")
        }
    }

    vgSetParameteri:
    {
        object:                         "ctx.object"
        paramType(decoration = "enum"): "ctx.object.parameter"
        value(decoration = "enum", decorationhint = "VG_.+"):     "ctx.object.parameter.value"
    }

    vgSetParameterf:
    {
        object:                         "ctx.object"
        paramType(decoration = "enum"): "ctx.object.parameter"
        value:                          "ctx.object.parameter.value"
    }

    vgSetParameteriv:
    {
        object:                         "ctx.object"
        paramType(decoration = "enum"): "ctx.object.parameter"
        values:
        {
            state:                      "ctx.object.parameter.value"
            metatype(class = "array", size = "count")
        }
    }
    
    vgSetParameterfv:
    {
        object:                         "ctx.object"
        paramType(decoration = "enum"): "ctx.object.parameter"
        values:
        {
            state:                      "ctx.object.parameter.value"
            metatype(class = "array", size = "count")
        }
    }

    vgGetParameteri:
    {
        paramType(decoration = "enum")
    }

    vgGetParameterf:
    {
        paramType(decoration = "enum")
    }

    vgGetParameteriv:
    {
        paramType(decoration = "enum")
        values:
        {
            metatype(class = "array", size = "count")
        }
    }

    vgGetParameterfv:
    {
        paramType(decoration = "enum")
        values:
        {
            metatype(class = "array", size = "count")
        }
    }
    
    vgLoadIdentity:
    {
        /* TODO: modify instead of set since we don't distinguish between matrix modes yet */
        @modify:       "ctx.matrix"
    }
    
    vgLoadMatrix:
    {
        m:
        {
            metatype(class = "array", size = 9)
        }
        @modify:       "ctx.matrix"
    }

    vgMultMatrix:
    {
        m:
        {
            metatype(class = "array", size = 9)
        }
        @modify:       "ctx.matrix"
    }

    vgTranslate:
    {
        @modify:       "ctx.matrix"
    }

    vgScale:
    {
        @modify:       "ctx.matrix"
    }
    
    vgShear:
    {
        @modify:       "ctx.matrix"
    }

    vgRotate:
    {
        @modify:       "ctx.matrix"
    }

    vgClear(rendercall = 1, framemarker = 1):
    {
    }

    vgMask(rendercall = 1):
    {
    }
   
    vgClearPath:
    {
        capabilities(decoration = "bitfield", decorationhint = "VGPathCapabilities")
        path:           "ctx.object"
        @set:           "ctx.object.segments"
    }
    
    vgDestroyPath:
    {
        path:           "ctx.object"
        @set:           "ctx.object.segments"
    }

    vgRemovePathCapabilities:
    {
        path:           "ctx.object"
        capabilities(decoration = "bitfield", decorationhint = "VGPathCapabilities")
        @modify:        "ctx.object.capabilities"
    }
    
    vgAppendPath:
    {
        dstPath:        "ctx.object"
        @modify:        "ctx.object.segments"
    }

    vgTransformPath:
    {
        dstPath:        "ctx.object"
        @modify:        "ctx.object.segments"
    }
    
    vgInterpolatePath:
    {
        dstPath:        "ctx.object"
        @modify:        "ctx.object.segments"
    }
    
    vgPointAlongPath:
    {
        x:
        {
            metatype(class = "array", size = 1)
        }
        y:
        {
            metatype(class = "array", size = 1)
        }
        tangentX:
        {
            metatype(class = "array", size = 1)
        }
        tangentY:
        {
            metatype(class = "array", size = 1)
        }
    }

    vgPathBounds:
    {
        minX:
        {
            metatype(class = "array", size = 1)
        }
        minY:
        {
            metatype(class = "array", size = 1)
        }
        width:
        {
            metatype(class = "array", size = 1)
        }
        height:
        {
            metatype(class = "array", size = 1)
        }
    }
    
    vgPathTransformedBounds:
    {
        minX:
        {
            metatype(class = "array", size = 1)
        }
        minY:
        {
            metatype(class = "array", size = 1)
        }
        width:
        {
            metatype(class = "array", size = 1)
        }
        height:
        {
            metatype(class = "array", size = 1)
        }
    }
    
    vgDrawPath(rendercall = 1):
    {
        paintModes(decoration = "bitfield", decorationhint = "VGPaintMode")
    }
    
    vgCreatePaint:
    {
        @return:    "ctx.object"
    }

    vgDestroyPaint:
    {
        paint:      "ctx.object"
        @modify:    "ctx.object"
    }

    vgSetPaint:
    {
        paint:      "ctx.object"
        paintModes(decoration = "bitfield", decorationhint = "VGPaintMode"): "ctx.paint_mode"
        @copy(src = "ctx.object", dest = "ctx.paint_mode.handle")
    }

    vgSetColor:
    {
        paint:      "ctx.object"
        rgba:       "ctx.object.color"
    }
    
    vgPaintPattern:
    {
        paint:      "ctx.object"
        pattern:    "ctx.object.pattern"
    }
    
    vgCreateImage:
    {
        format:         "ctx.object.format"
        width:          "ctx.object.width"
        height:         "ctx.object.height"
        allowedQuality(decoration = "bitfield", decorationhint = "VGImageQuality"): "ctx.object.allowed_quality"
        @return:        "ctx.object"
    }
    
    vgDestroyImage:
    {
        image:          "ctx.object"
        @modify:        "ctx.object"
    }

    vgImageSubData:
    {
        image:          "ctx.object"
        @modify:        "ctx.object.pixels"
    }
    
    vgChildImage:
    {
        @return:        "ctx.object"
    }
    
    vgCopyImage:
    {
        dst:            "ctx.object"
        @modify:        "ctx.object.pixels"
    }

    vgDrawImage(rendercall = 1):
    {
    }
    
    vgSetPixels(rendercall = 1):
    {
    }
    
    vgWritePixels(rendercall = 1):
    {
        data:
        {
            metatype(class = "image", stride = "dataStride", height= "height", components = 1, type = "byte")
        }
    }
    
    vgReadPixels:
    {
        data:
        {
            metatype(class = "image", stride = "dataStride", height= "height", components = 1, type = "byte")
        }
    }
    
    vgCopyPixels(rendercall = 1):
    {
    }
    
    vgColorMatrix:
    {
        dst:        "ctx.object"
        matrix:
        {
            metatype(class = "array", size = 16)
        }
        @modify:    "ctx.object.pixels"
    }

    vgConvolve:
    {
        dst:        "ctx.object"
        kernel:
        {
            metatype(class = "array", size = "kernelWidth * kernelHeight")
        }
        @modify:    "ctx.object.pixels"
    }
   
    vgSeparableConvolve:
    {
        dst:        "ctx.object"
        kernelX:
        {
            metatype(class = "array", size = "kernelWidth")
        }
        kernelY:
        {
            metatype(class = "array", size = "kernelHeight")
        }
        @modify:    "ctx.object.pixels"
    }
    
    vgGaussianBlur:
    {
        dst:        "ctx.object"
        @modify:    "ctx.object.pixels"
    }
    
    vgLookup:
    {
        dst:        "ctx.object"
        redLUT:
        {
            metatype(class = "array", size = "256")
        }
        greenLUT:
        {
            metatype(class = "array", size = "256")
        }
        blueLUT:
        {
            metatype(class = "array", size = "256")
        }
        alphaLUT:
        {
            metatype(class = "array", size = "256")
        }
        @modify:    "ctx.object.pixels"
    }
    
    vgLookupSingle:
    {
        dst:        "ctx.object"
        lookupTable:
        {
            metatype(class = "array", size = "256")
        }
    }
    
    vgHardwareQuery:
    {
    }

    /* VGU functions moved to separate library */
/*
    vguLine:
    {
        path:     "ctx.object"
        @modify:  "ctx.object.segments"
    }

    vguPolygon:
    {
        path:     "ctx.object"
        points:
        {
            metatype(class = "array", size = "count")
        }
        @modify:  "ctx.object.segments"
    }
    
    vguRect:
    {
        path:     "ctx.object"
        @modify:  "ctx.object.segments"
    }

    vguRoundRect:
    {
        path:     "ctx.object"
        @modify:  "ctx.object.segments"
    }

    vguEllipse:
    {
        path:     "ctx.object"
        @modify:  "ctx.object.segments"
    }

    vguArc:
    {
        path:     "ctx.object"
        @modify:  "ctx.object.segments"
    }
    
    vguComputeWarpQuadToSquare:
    {
        matrix:
        {
            metatype(class = "array", size = 9)
        }
    }
    
    vguComputeWarpSquareToQuad:
    {
        matrix:
        {
            metatype(class = "array", size = 9)
        }
    }

    vguComputeWarpQuadToQuad:
    {
        matrix:
        {
            metatype(class = "array", size = 9)
        }
    }
*/
}

/* State tracking */
state:
{
    ctx:
    {
        /* Render surface dimensions */
        render_width
        render_height
        
        object:
        {
            parameter:
            {
                value
            }
            
            /* VGPath attributes */
            datatype
            segments
            coords
            segment_count
            capabilities
            
            /* VGPaint attributes */
            color
            pattern
            
            /* VGImage attributes */
            format
            width
            height
            allowed_quality
            pixels
        }
        
        parameter:
        {
            value
        }
        
        paint_mode:
        {
            handle
        }
        
        matrix

        /* Root context for shared contexts */
        root_ctx
    }
}
